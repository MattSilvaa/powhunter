// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MattSilvaa/powhunter/internal/weather (interfaces: WeatherService)
//
// Generated by this command:
//
//	mockgen -destination=internal/weather/mocks/mock_weather.go -package=mocks github.com/MattSilvaa/powhunter/internal/weather WeatherService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	weather "github.com/MattSilvaa/powhunter/internal/weather"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
	isgomock struct{}
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// GetSnowForecast mocks base method.
func (m *MockWeatherService) GetSnowForecast(ctx context.Context, lat, lon float64) ([]weather.SnowPrediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnowForecast", ctx, lat, lon)
	ret0, _ := ret[0].([]weather.SnowPrediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnowForecast indicates an expected call of GetSnowForecast.
func (mr *MockWeatherServiceMockRecorder) GetSnowForecast(ctx, lat, lon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnowForecast", reflect.TypeOf((*MockWeatherService)(nil).GetSnowForecast), ctx, lat, lon)
}
