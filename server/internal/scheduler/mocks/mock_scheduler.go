// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MattSilvaa/powhunter/internal/scheduler (interfaces: ForecastSchedulerService)
//
// Generated by this command:
//
//	mockgen -destination=internal/scheduler/mocks/mock_scheduler.go -package=mocks github.com/MattSilvaa/powhunter/internal/scheduler ForecastSchedulerService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockForecastSchedulerService is a mock of ForecastSchedulerService interface.
type MockForecastSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockForecastSchedulerServiceMockRecorder
	isgomock struct{}
}

// MockForecastSchedulerServiceMockRecorder is the mock recorder for MockForecastSchedulerService.
type MockForecastSchedulerServiceMockRecorder struct {
	mock *MockForecastSchedulerService
}

// NewMockForecastSchedulerService creates a new mock instance.
func NewMockForecastSchedulerService(ctrl *gomock.Controller) *MockForecastSchedulerService {
	mock := &MockForecastSchedulerService{ctrl: ctrl}
	mock.recorder = &MockForecastSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForecastSchedulerService) EXPECT() *MockForecastSchedulerServiceMockRecorder {
	return m.recorder
}

// CheckForecasts mocks base method.
func (m *MockForecastSchedulerService) CheckForecasts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForecasts")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckForecasts indicates an expected call of CheckForecasts.
func (mr *MockForecastSchedulerServiceMockRecorder) CheckForecasts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForecasts", reflect.TypeOf((*MockForecastSchedulerService)(nil).CheckForecasts))
}

// Start mocks base method.
func (m *MockForecastSchedulerService) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockForecastSchedulerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockForecastSchedulerService)(nil).Start))
}

// Stop mocks base method.
func (m *MockForecastSchedulerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockForecastSchedulerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockForecastSchedulerService)(nil).Stop))
}
