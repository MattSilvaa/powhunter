// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MattSilvaa/powhunter/internal/db (interfaces: StoreService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_store.go -package=mocks github.com/MattSilvaa/powhunter/internal/db StoreService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/MattSilvaa/powhunter/internal/db"
	db0 "github.com/MattSilvaa/powhunter/internal/db/generated"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreService is a mock of StoreService interface.
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
	isgomock struct{}
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService.
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance.
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// CreateUserWithAlerts mocks base method.
func (m *MockStoreService) CreateUserWithAlerts(ctx context.Context, email, phone string, minSnowAmount float64, notificationDays int32, resortUUIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithAlerts", ctx, email, phone, minSnowAmount, notificationDays, resortUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWithAlerts indicates an expected call of CreateUserWithAlerts.
func (mr *MockStoreServiceMockRecorder) CreateUserWithAlerts(ctx, email, phone, minSnowAmount, notificationDays, resortUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithAlerts", reflect.TypeOf((*MockStoreService)(nil).CreateUserWithAlerts), ctx, email, phone, minSnowAmount, notificationDays, resortUUIDs)
}

// GetAlertMatches mocks base method.
func (m *MockStoreService) GetAlertMatches(ctx context.Context, resortUUID string, forecastDate time.Time, predictedSnowAmount float64, daysAhead int32) ([]db.AlertToSend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertMatches", ctx, resortUUID, forecastDate, predictedSnowAmount, daysAhead)
	ret0, _ := ret[0].([]db.AlertToSend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertMatches indicates an expected call of GetAlertMatches.
func (mr *MockStoreServiceMockRecorder) GetAlertMatches(ctx, resortUUID, forecastDate, predictedSnowAmount, daysAhead any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertMatches", reflect.TypeOf((*MockStoreService)(nil).GetAlertMatches), ctx, resortUUID, forecastDate, predictedSnowAmount, daysAhead)
}

// ListAllResorts mocks base method.
func (m *MockStoreService) ListAllResorts(ctx context.Context) ([]db0.Resort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResorts", ctx)
	ret0, _ := ret[0].([]db0.Resort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResorts indicates an expected call of ListAllResorts.
func (mr *MockStoreServiceMockRecorder) ListAllResorts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResorts", reflect.TypeOf((*MockStoreService)(nil).ListAllResorts), ctx)
}

// RecordAlertSent mocks base method.
func (m *MockStoreService) RecordAlertSent(ctx context.Context, alert db.AlertToSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordAlertSent", ctx, alert)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordAlertSent indicates an expected call of RecordAlertSent.
func (mr *MockStoreServiceMockRecorder) RecordAlertSent(ctx, alert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAlertSent", reflect.TypeOf((*MockStoreService)(nil).RecordAlertSent), ctx, alert)
}
