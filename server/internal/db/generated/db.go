// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkAlertSentStmt, err = db.PrepareContext(ctx, checkAlertSent); err != nil {
		return nil, fmt.Errorf("error preparing query CheckAlertSent: %w", err)
	}
	if q.clearResortsStmt, err = db.PrepareContext(ctx, clearResorts); err != nil {
		return nil, fmt.Errorf("error preparing query ClearResorts: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserAlertStmt, err = db.PrepareContext(ctx, createUserAlert); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserAlert: %w", err)
	}
	if q.getLastAlertSnowAmountStmt, err = db.PrepareContext(ctx, getLastAlertSnowAmount); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastAlertSnowAmount: %w", err)
	}
	if q.getResortAlertsStmt, err = db.PrepareContext(ctx, getResortAlerts); err != nil {
		return nil, fmt.Errorf("error preparing query GetResortAlerts: %w", err)
	}
	if q.getResortByUUIDStmt, err = db.PrepareContext(ctx, getResortByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query GetResortByUUID: %w", err)
	}
	if q.getUserAlertStmt, err = db.PrepareContext(ctx, getUserAlert); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAlert: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByUUIDStmt, err = db.PrepareContext(ctx, getUserByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUUID: %w", err)
	}
	if q.insertAlertHistoryStmt, err = db.PrepareContext(ctx, insertAlertHistory); err != nil {
		return nil, fmt.Errorf("error preparing query InsertAlertHistory: %w", err)
	}
	if q.insertResortStmt, err = db.PrepareContext(ctx, insertResort); err != nil {
		return nil, fmt.Errorf("error preparing query InsertResort: %w", err)
	}
	if q.listActiveAlertsStmt, err = db.PrepareContext(ctx, listActiveAlerts); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveAlerts: %w", err)
	}
	if q.listResortsStmt, err = db.PrepareContext(ctx, listResorts); err != nil {
		return nil, fmt.Errorf("error preparing query ListResorts: %w", err)
	}
	if q.updateUserAlertStmt, err = db.PrepareContext(ctx, updateUserAlert); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserAlert: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkAlertSentStmt != nil {
		if cerr := q.checkAlertSentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkAlertSentStmt: %w", cerr)
		}
	}
	if q.clearResortsStmt != nil {
		if cerr := q.clearResortsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing clearResortsStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserAlertStmt != nil {
		if cerr := q.createUserAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserAlertStmt: %w", cerr)
		}
	}
	if q.getLastAlertSnowAmountStmt != nil {
		if cerr := q.getLastAlertSnowAmountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastAlertSnowAmountStmt: %w", cerr)
		}
	}
	if q.getResortAlertsStmt != nil {
		if cerr := q.getResortAlertsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResortAlertsStmt: %w", cerr)
		}
	}
	if q.getResortByUUIDStmt != nil {
		if cerr := q.getResortByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResortByUUIDStmt: %w", cerr)
		}
	}
	if q.getUserAlertStmt != nil {
		if cerr := q.getUserAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAlertStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByUUIDStmt != nil {
		if cerr := q.getUserByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUUIDStmt: %w", cerr)
		}
	}
	if q.insertAlertHistoryStmt != nil {
		if cerr := q.insertAlertHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertAlertHistoryStmt: %w", cerr)
		}
	}
	if q.insertResortStmt != nil {
		if cerr := q.insertResortStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertResortStmt: %w", cerr)
		}
	}
	if q.listActiveAlertsStmt != nil {
		if cerr := q.listActiveAlertsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveAlertsStmt: %w", cerr)
		}
	}
	if q.listResortsStmt != nil {
		if cerr := q.listResortsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listResortsStmt: %w", cerr)
		}
	}
	if q.updateUserAlertStmt != nil {
		if cerr := q.updateUserAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserAlertStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	checkAlertSentStmt         *sql.Stmt
	clearResortsStmt           *sql.Stmt
	createUserStmt             *sql.Stmt
	createUserAlertStmt        *sql.Stmt
	getLastAlertSnowAmountStmt *sql.Stmt
	getResortAlertsStmt        *sql.Stmt
	getResortByUUIDStmt        *sql.Stmt
	getUserAlertStmt           *sql.Stmt
	getUserByEmailStmt         *sql.Stmt
	getUserByUUIDStmt          *sql.Stmt
	insertAlertHistoryStmt     *sql.Stmt
	insertResortStmt           *sql.Stmt
	listActiveAlertsStmt       *sql.Stmt
	listResortsStmt            *sql.Stmt
	updateUserAlertStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		checkAlertSentStmt:         q.checkAlertSentStmt,
		clearResortsStmt:           q.clearResortsStmt,
		createUserStmt:             q.createUserStmt,
		createUserAlertStmt:        q.createUserAlertStmt,
		getLastAlertSnowAmountStmt: q.getLastAlertSnowAmountStmt,
		getResortAlertsStmt:        q.getResortAlertsStmt,
		getResortByUUIDStmt:        q.getResortByUUIDStmt,
		getUserAlertStmt:           q.getUserAlertStmt,
		getUserByEmailStmt:         q.getUserByEmailStmt,
		getUserByUUIDStmt:          q.getUserByUUIDStmt,
		insertAlertHistoryStmt:     q.insertAlertHistoryStmt,
		insertResortStmt:           q.insertResortStmt,
		listActiveAlertsStmt:       q.listActiveAlertsStmt,
		listResortsStmt:            q.listResortsStmt,
		updateUserAlertStmt:        q.updateUserAlertStmt,
	}
}
