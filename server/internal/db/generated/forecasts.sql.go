// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: forecasts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSnowForecast = `-- name: CreateSnowForecast :one
INSERT INTO snow_forecasts (
  resort_uuid, forecast_date, predicted_snow_amount
) VALUES (
  $1, $2, $3
)
ON CONFLICT (resort_uuid, forecast_date) DO UPDATE
SET predicted_snow_amount = EXCLUDED.predicted_snow_amount,
    last_updated = NOW()
RETURNING id, resort_uuid, forecast_date, predicted_snow_amount, last_updated
`

type CreateSnowForecastParams struct {
	ResortUuid          uuid.NullUUID `json:"resort_uuid"`
	ForecastDate        time.Time     `json:"forecast_date"`
	PredictedSnowAmount int32         `json:"predicted_snow_amount"`
}

func (q *Queries) CreateSnowForecast(ctx context.Context, arg CreateSnowForecastParams) (SnowForecast, error) {
	row := q.queryRow(ctx, q.createSnowForecastStmt, createSnowForecast, arg.ResortUuid, arg.ForecastDate, arg.PredictedSnowAmount)
	var i SnowForecast
	err := row.Scan(
		&i.ID,
		&i.ResortUuid,
		&i.ForecastDate,
		&i.PredictedSnowAmount,
		&i.LastUpdated,
	)
	return i, err
}

const getSnowForecasts = `-- name: GetSnowForecasts :many
SELECT id, resort_uuid, forecast_date, predicted_snow_amount, last_updated FROM snow_forecasts
WHERE resort_uuid = $1
  AND forecast_date BETWEEN $2 AND $3
  AND predicted_snow_amount >= $4
`

type GetSnowForecastsParams struct {
	ResortUuid          uuid.NullUUID `json:"resort_uuid"`
	ForecastDate        time.Time     `json:"forecast_date"`
	ForecastDate_2      time.Time     `json:"forecast_date_2"`
	PredictedSnowAmount int32         `json:"predicted_snow_amount"`
}

func (q *Queries) GetSnowForecasts(ctx context.Context, arg GetSnowForecastsParams) ([]SnowForecast, error) {
	rows, err := q.query(ctx, q.getSnowForecastsStmt, getSnowForecasts,
		arg.ResortUuid,
		arg.ForecastDate,
		arg.ForecastDate_2,
		arg.PredictedSnowAmount,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SnowForecast{}
	for rows.Next() {
		var i SnowForecast
		if err := rows.Scan(
			&i.ID,
			&i.ResortUuid,
			&i.ForecastDate,
			&i.PredictedSnowAmount,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
