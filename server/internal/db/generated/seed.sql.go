// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seed.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const clearResorts = `-- name: ClearResorts :exec
DELETE FROM resorts
`

func (q *Queries) ClearResorts(ctx context.Context) error {
	_, err := q.exec(ctx, q.clearResortsStmt, clearResorts)
	return err
}

const insertResort = `-- name: InsertResort :one
INSERT INTO resorts (
  uuid, name, url_host, url_pathname, latitude, longitude
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, uuid, name, url_host, url_pathname, latitude, longitude
`

type InsertResortParams struct {
	Uuid        uuid.UUID       `json:"uuid"`
	Name        string          `json:"name"`
	UrlHost     sql.NullString  `json:"url_host"`
	UrlPathname sql.NullString  `json:"url_pathname"`
	Latitude    sql.NullFloat64 `json:"latitude"`
	Longitude   sql.NullFloat64 `json:"longitude"`
}

func (q *Queries) InsertResort(ctx context.Context, arg InsertResortParams) (Resort, error) {
	row := q.queryRow(ctx, q.insertResortStmt, insertResort,
		arg.Uuid,
		arg.Name,
		arg.UrlHost,
		arg.UrlPathname,
		arg.Latitude,
		arg.Longitude,
	)
	var i Resort
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.UrlHost,
		&i.UrlPathname,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}
