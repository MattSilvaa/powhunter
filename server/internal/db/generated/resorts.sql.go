// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resorts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getResortByUUID = `-- name: GetResortByUUID :one
SELECT id, uuid, name, url_host, url_pathname, latitude, longitude FROM resorts
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetResortByUUID(ctx context.Context, argUuid uuid.UUID) (Resort, error) {
	row := q.queryRow(ctx, q.getResortByUUIDStmt, getResortByUUID, argUuid)
	var i Resort
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.UrlHost,
		&i.UrlPathname,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const listResorts = `-- name: ListResorts :many
SELECT id, uuid, name, url_host, url_pathname, latitude, longitude FROM resorts
ORDER BY name
`

func (q *Queries) ListResorts(ctx context.Context) ([]Resort, error) {
	rows, err := q.query(ctx, q.listResortsStmt, listResorts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resort{}
	for rows.Next() {
		var i Resort
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.UrlHost,
			&i.UrlPathname,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
