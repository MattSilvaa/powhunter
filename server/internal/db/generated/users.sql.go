// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, phone
) VALUES (
  $1, $2
)
RETURNING id, uuid, email, phone, created_at
`

type CreateUserParams struct {
	Email string         `json:"email"`
	Phone sql.NullString `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.Phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, email, phone, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, uuid, email, phone, created_at FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserByUUID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByUUIDStmt, getUserByUUID, argUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
