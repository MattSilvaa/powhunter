// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: alert_history.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkAlertSent = `-- name: CheckAlertSent :one
SELECT EXISTS(
  SELECT 1 FROM alert_history
  WHERE user_id = $1
    AND resort_uuid = $2
        AND forecast_date = $3
) as alert_sent
`

type CheckAlertSentParams struct {
	UserID       sql.NullInt32 `json:"user_id"`
	ResortUuid   uuid.NullUUID `json:"resort_uuid"`
	ForecastDate time.Time     `json:"forecast_date"`
}

func (q *Queries) CheckAlertSent(ctx context.Context, arg CheckAlertSentParams) (bool, error) {
	row := q.queryRow(ctx, q.checkAlertSentStmt, checkAlertSent, arg.UserID, arg.ResortUuid, arg.ForecastDate)
	var alert_sent bool
	err := row.Scan(&alert_sent)
	return alert_sent, err
}

const createAlertHistory = `-- name: CreateAlertHistory :one
INSERT INTO alert_history (
  user_id, resort_uuid, forecast_date, snow_amount
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, resort_uuid, sent_at, forecast_date, snow_amount
`

type CreateAlertHistoryParams struct {
	UserID       sql.NullInt32 `json:"user_id"`
	ResortUuid   uuid.NullUUID `json:"resort_uuid"`
	ForecastDate time.Time     `json:"forecast_date"`
	SnowAmount   int32         `json:"snow_amount"`
}

func (q *Queries) CreateAlertHistory(ctx context.Context, arg CreateAlertHistoryParams) (AlertHistory, error) {
	row := q.queryRow(ctx, q.createAlertHistoryStmt, createAlertHistory,
		arg.UserID,
		arg.ResortUuid,
		arg.ForecastDate,
		arg.SnowAmount,
	)
	var i AlertHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResortUuid,
		&i.SentAt,
		&i.ForecastDate,
		&i.SnowAmount,
	)
	return i, err
}
